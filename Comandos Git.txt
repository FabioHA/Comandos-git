

**********SUMARIO************************

PAG 1:	git config --global
PAG 2:	git config --global core.editor
PAG 3:	git config --list
PAG 4:	Tecla Q desbloqueia a tela do git
PAG 5:	pwd
PAG 6:	ls ou dir
PAG 7:	comando cd
PAG 8:	mkdir
PAG 9:	git init
PAG 10:	git status
PAG 11:	git add
PAG 12:	git add -A
PAG 13:	git commit -m
PAG 14:	git log
PAG 15:	git reset
PAG 16:	git branch nome_do_branch  //esse comando é para mudar/trocar de branch
PAG 17:	git checkout
PAG 18:	git branch
PAG 19:	git diff
PAG 20:	git remote add
PAG 21:	.gitignore
PAG 22:	git revert  --no-edit
PAG 23:	git push origin   nome_do_branch_que_sera_enviado  //esse comando é para adicionar um novo branch ao repositório remoto
PAG 24:	git branch -D nome_do_branch    e sua variação    git push origin :nome_do_branch
PAG 25:	git pull origin  master
PAG 26:	git clone
PAG 27:	Como fazer um Fork



+++++++++++++++++++++++++++++++++++++++++++++++++++++
-----------------------------------------------------
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&






PAG 1

para definir o nome do usuario e seu email em uma maquina, em que o git esta instalado,
se usa esses comandos:

git config --global user.name "Fabio H******* de *****"

git config --global user.email "f*****.*****.sp@gmail.com"

-------------------------------------------------------------------------

PAG 2

para defir o VisualStudio como o editor principal use esse comando:

git config --global core.editor "code --wait"

--------------------------------------------------------------
PAG 3
para saber as configuracoes definidas no git da maquina, como por exemplo o nome,email,editor-padrao
use esse comando:

git config --list

------------------------------------------------------------------



PAG 4
OBS IMPORTANTE!! As vezes, por engano, vc pode clicar no terminal e ele fica preso, preso no sentido que vc não consegue sair mesmo apertando qualquer botão, 
pra resolver esse problema é só vc apertar a tecla 'Q' e está tudo resolvido, ou seja as coisas voltam ao normal.







----------------------------------------------------------------

PAG 5

para saber em que pasta se está utilize o comando pwd, pois ele lhe dará todo path(caminho) desde de o diretório raiz. 
o comando é esse: pwd

-----------------------------------------------

PAG 6
para saber os arquivos e pastas presentes no diretorio/pasta atual 

utilize o comando: ls

ou utilize o comando: dir


OBS: o ls é melhor pois ele diferencia as pastas de outros arquivos, pois ele mudar a cor do nome da pasta para azul. E isso
ajuda a bater o olho e ver o que é uma pasta e o que é por exemplo um arquivo imagem jpg, png, ou pdf


------------------------------------------------

PAG 7
para mudar de pastas se utiliza o comando cd e o nome da pasta ou o endereco ate ela
por exemplo vamos supor que eu estou na pasta c. Ai eu digito um ls, pra saber quais arquivos/pastas ela possui,
ai eu vejo uma pasta chamada  users e eu quero entrar nela então o comando a se digitar
é:

cd users
-------

agora vamos supor que eu quero ir para uma pasta que esta a muitos subniveis da minha, tipo 
seja pra chegar nela eu precisaria entrar em varias subpastas. tipo cd pastaA, depois cd pastaB, 
cd pastaC, cd pastaD, .. e  assim por diante. Seria muito trabalhoso/verboso e burocratico não?
Mas felizmente existe uma solucão basta digitar o endereco(path) inteiro até ela. 

cd C:\Users\Fabio\Desktop\pastaA\pastaB\pastaC\pastaD

OBS IMPORTANTE!! esse codigo falhara pois o git não aceita o \ então vc tem que mudar cada \ por /
assim o:

C:/Users/Fabio/Desktop/pastaA/pastaB/pastaC/pastaD

-------------------------------------------------

PAG 8
para criar uma nova pasta via git utilize esse comando:

mkdir nome_da_pasta

------------------------------------------

PAG 9
para inicializar um projeto voce deve entrar na pasta onde esse projeto ficará, 
e depois utilize o seguinte comando:

git init 

-------------------------------------------

PAG 10
para varrer/percorrer uma pasta e saber se algum arquivo foi adicionado ou modificado
utilize o comando:

git status

-------------------------------------------------------

PAG 11
para adicionar UM(1) novo arquivo ou um arquivo que sofreu modificações 
utilize o comando:

git add nome_do_arquivo

---------------------------------------

PAG 12
para adicionar VARIOS novos arquivos ou VARIOS arquivos que sofreram modificacoes
utilize o comando:

git add -A

OBS IMPORTANTE!: o A tem que ser maiusculo, senao nao funciona

--------------------------------------------------------


PAG 13
para criar uma mensagem dizendo que alteracoes foram feitas(commit)
utilize o comando:

git commit -m "Alguma mensagem que descreve as alteracoes"




-----------------------------------------------------


PAG 14
para ver a lista de todos os commits feitos numa determinado ramo do projeto(branch)
utilize o comando:

git log 

--------------------------------------------------------


PAG 15
se surgir algum erro no seu codigo e vc precisar voltar a um estado anterior a esse erro
isso e possivel utilizando o git. Existem tres possibilidades. 


Na 1 PRIMEIRA vc pode voltar ao estado anterior do commit, ou seja os arquivos permanecerão 
da mesma forma como estão mas não estarão salvos, o que te permite corrigir algum erro 
e depois commitar, não precisa adicionar(git add -A) pois no modo soft ele ja vem adicionado
e basta so commit, e quando ele for commitado esse novo commit substituirá o ultimo, que nesse
caso era o errado que está sendo corrigido.
para utilizar esse comando faça:

git reset --soft hash_do_commit


Obs: existe o modo --mixed e sua unica diferenca, pelo que eu entendi, é que ele volta
ao estado anterior ao adicionamento , então vc teria que adicionar(git add -A) e depois 
salvar(commit). Então essa seria a 2 SEGUNDA opcao



Na 3 TERCEIRA opcao, a mais radical, vc volta ao estado anterior do commit e os arquivos 
criados serão excluidos. Então muito cuidado!!. Mas também os arquivos excluido voltarão.
Ou seja todos os arquivos criados após o reset serão excluidos, e todos os arquivos
excluidos após o reset voltarão. Utilize esse comando como ultimo recurso ou com muito cuidado!!

para utilizalo faça:


git reset --hard hash_do_commit


-----------------------------------------------------------------


PAG 16

para criar um novo ramo do projeto(branch) basta utilizar o comando:

git branch nome_do_branch


OBS IMPORTANTE!:  quando um novo branch(ramo) é criado ele copia a versão 
atual do prejeto inicializado no git, e apartir daí segue seu próprio 
rumo. Por exemplo vamos supor que eu crio um brqanch chamdo ramo2(git branch ramo2)
agora existiram dois branchs, o master(sempre existe) e o ramo2.

o ramo2 é criado como uma cópia do master, mas se por exemplo eu criar um arquivo teste.txt,
ou qualquer outro tipo de arquivo/modificação, ele só existirá no ramo2. Isso permite fazer
modificações em um branch sem afetar o outro.


---------------------------------------------------------------------

PAG 17
para mudar de branch utilize o comando:

git checkout nome_do_branch


---------------------------------------------

PAG 
para saber quais/quantos branchs existem, qual está selecionado(aparecerá com um asterisco), 
utilize o comando:

git branch

--------------------------------------------------------

PAG 19
para saber quais foram as modificações feitas em um arquivo antes de comitalas 
utilize o comando:

git diff

OBS: esse comando apresenta uma símbologia própria par dizer se uma linha foi acrescentada(+), excluída(-), 
ou não sofreu alteração(sem símbolo).

Exemplo 

+Essa linha foi acrescentada
+Essa também foi
Essa aqui não foi alterada
não foi alterada
-Já essa foi excluída
+
+
+	(espaços em branco tbm podem ser acrescentados. nesse caso eles aparecerão como o exemplo acima, ou seja uma linha com o símbolo + vazia)
não foi alerada
não foi alerada
-essa foi excluída


O comando diff possuí variações, como por exemplo se vc quiser saber apenas o nome dos
arquivos modificados, não seu conteúdo, vc digita o comando:

git diff --name-only


se vc quiser ver a modificação em um arquivo específico vc usa o comando:

git diff nome_do_arquivo


existe também a possibilidade voltar as modificações feitas, não comitadas, com o
diff para isso utilize o comando:

git checkout HEAD -- nome_do_arquivo

OBS: Quando eu utilizei esse comando num primeiro momento ele não retornou ao estado anterior 
da modificação, pelo menos visualmente, mas após fechar e abrir novamente o arquivo eu constatei 
que ele voltou ao estdo anterior as modificações, ou seja funcionou

----------------------------------------------------------------------------------------------------------------------


PAG 20

Depois que seu computador já está sincronizado com sua conta no github, vou listar os seguintes passos para associar 
repositório local com o remoto. Primeiro vc precisa ter uma pasta ja inicializada(git init) no seu computador e também criar 
um repositório la na conta do github. Assim que vc criar seu reporitório remoto o próprio github vai te fornecer um código 
para associar seu repositório local com o remoto.

Vai ser algo parecido com o comando abaixo:

git remote add origin https://github.com/seu_nome_usuario_no_github/nome_da_pasta_que_vc_criou.git

aí vc vai copiar esse comando e colar ele lá no terminal do git(janelinha preta), detalhe importante tem que ser no
mesmo diretório que vc vai querer associar com o repositório remoto



depois se vc quiser enviar algum arquivo local para o servidor remoto vc utiliza o comando abaixo:

 git push -u origin main

OBS: quando eu utilizei esse comando ele falhou pois o meu branch principal não se chama main, ele se chama master
então o comando que funcionou para mim foi: 
 
  git push -u origin master 

para saber qual é o nome do seu branch digite: git branch



----------------------------------------------------------------------------------

PAG 21
as vezes é necessário ocultar de usuários externos alguns arquivos do sistema, tipo as 
senhas do bancos de dados, informações pessoais.. etc, que apesar de serem indispensaveís ao 
seu funcionamento, no caso do sistema, precisam ser de alguma forma ocultados. E isso 
é possível criando um arquivo chamado .gitignore e escrevendo nele o nome dos arquivos, que estão no repositório local, 
que devem ser ignorados. Isso faz com que esses arquivos se tornem ocultos, apesar de seus nomes aparecerem no
gitignore seu conteúdo é vedado, ou seja não é possível acessa-lo 

-------------------------------------------------------------------------------------


PAG 22
imagine que é sexta-feira e vc está quase na hora de encerrar o expediente mas inesperadamente 
seu sistema apresenta um bug insoluvél e a aplicação cai. Desespero. Você precisa voltar imediatamente 
ao estado anterior, quando tudo funcionava bem, ai vc pensa em usar o reset 
mas se vc utilizar o reset vai perder todo o dia de trabalho duro, então o que fazer?
Nesse caso utilize o comando revert. O comando revert permite voltar ao estado anterior 
mas ele conserva hash do commit(git log) e assim permite vc voltar na segunda-feira(com calma)
e verificar o que de fato acarretou o bug. O fim de semana foi preservado.

git revert  --no-edit  hash_do_commit_que_deu_erro


OBS IMPORTANTE: o hash é do commit que deu erro, ou seja é provavelmente o último commit.
Esse ponto é outra diferença do reset pois no reset é o hash do commit anterior. Então
LEMBRE-SE no revert é o hash do commit que deu erro!!.

OBS IMPORTANTE2: o --no-edit é usado pois senão o git vai abrir o editor padrão para
vc já fazer a  verificação do código, e nesse exemplo vc só quer voltar ao estado 
que funcionava e não reeditar o código.

OBS IMPORTANTE3: outro ponto interessante é que o próprio git irá fazer um commit
que terá como característica o nome revert seguindo do nome do commit revertido entre aspas.
Veja o exemplo abaixo:   
	
      revert "nome_do_commit_revertido"



--------------------------------------------------------------------------------

PAG 23
para adicionar um novo branch ao repositório remoto primeiro vc deve selecionar 
esse branch(git checkout) e uma vez dentro desse branch vc utiliza o seguinte comando:

	git push origin   nome_do_branch_que_sera_enviado




---------------------------------------------------------------------------------


PAG 24
para excluir um branch local primeiro é necessário vc sair desse branch(git checkout), e após sair dele utilize o seguinte comando:

	git branch -D nome_do_branch


OBS: tem que ser o -D maiúsculo mesmo, senão não funciona.


OBS2: para excluir um branch remoto utilize o seguinte comando:

	git push origin :nome_do_branch

Note que a única diferença entre adicionar e excluir um branch remoto é os dois pontos(:)

------------------------------------------------------------------------------


PAG 25
para puxar(pull) alterações no repositório remoto, alterações essas que podem ter sido feitas por outros colaboradores,
vc utiliza o seguinte comando:

	git pull origin   nome_do_branch_la_do_repositorio_remoto




OBS: muitas vezes o branch escolhido será o master, então é comum esse comando ficar assim:

	git pull origin  master


OBS2: essa ação de puxar puxa tudo mesmo, desde arquivos criados/modificados até seus respectivos commits
que podream ser acessados normalmente via git log

-----------------------------------------------------------------------------------------------------------


PAG 26
para clonar um repositório, ou seja para baixar um projeto lá do github para sua máquina, basta
utilizar o seguinte comando:

	git clone  url_do_projeto_la_do_github


OBS: quando eu digo url é url mesmo, tipo ir lá no github do projeto que vc quer clonar
e copiar a url mesmo. Ficará algo meio assim:
	
	git clone https://github.com/nome_do_usuario/nome_do_projeto


OBS2: NÃO é necessário vc inicializar a pasta(git init) que recebera o git clone, pois 
todo projeto baixado vira como uma pasta e nessa pasta virá também uma pasta .git, ou seja
é como se ela já fosse inicializada com o git init. Ela também virá com todos os commits
feitos anteriormentes, que poderão ser vistos via git log. Mas lembre-se vc não poderá fazer git push
pois vc apenas clonou o projeto em seu computador, para dar git push vc necessita da permissão do
usuário e também esse não o propósito desse comando.
 

--------------------------------------------------------------------------------------

PAG 27
é possível contribuir com um projeto de outra pessoa, se ele estiver lá no github, por meio 
de um fork. Funciona assim, toda a conta no github que possuí projetos publicos tem um botão
chamdo fork e esse botão permite que vc copie o projeto em em questão no seu próprio repositório remoto, ou seja sua conta no github.
Uma vez lá na sua conta remota, no seu github, vc consegue clona-lo no seu repositório local(git clone), ou seja no seu computador.

Lá no seu computador vc consegue alterar o/os arquivos, fazer commits, e enviar git push. Mas lembre-se essas alterações acontecerão apenas no 
seu repositório remoto, não no original que foi "forkado". 

Para que essa modificação seja concretizada no original vc precisará da aprovação do dono do projeto original. 
Então vamos supor que vc fez o fork do arquivo, depois vc clonou esse arquivo no seu computador, e fez os git push,
enfim terminou seu trabalho, agora como solicitar a aprovação do dono do arquivo?
No projeto "forkado", lá no seu github, vc vai clicar no botão 'New pull request', será aberto uma página
com as informações sobre as alterações do projeto, uma vez confirido tudo vc clicará no botão chamado 'Create pull request',
após isso abrirá uma página/seção onde vc específica o porque de sua alteração, tipo qual problema vc consegui resolver, enfim tenta
demonstrar porque o dono deveria aceitar suas modificações, aí vc vai clicar novamente no 
botão 'Create pull request' e a solicitação de aprovação será enviado ao dono original que poderá ser aceita ou não.


OBS IMPORTANTE!!: antes de vc fazer um git push no projeto do seu repositório remoto, o que foi "forkado", faça os seguintes comando por segurança:
	
	git branch 

no caso esse git branch vai te dizer qual o nome os donos originais deram pro branch 

Depois vc faz o seguinte comando:

	git remote -v 

Esse comando vai ter dizer o nome que os donos originais deram ao servidor remoto, provavelmente 
será origin mas é bom usar esse comando para ter certeza.


De posse dessas informações vc pode fazer o git push, que ficará dessa forma:

	git push     nome_do_servidor_remoto(provavlemente origin)     nome_do_branch



--------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------




	











































































































































































